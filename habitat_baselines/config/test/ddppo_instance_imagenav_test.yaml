BASE_TASK_CONFIG_PATH: configs/tasks/instance_imagenav_hm3d.yaml
TASK_CONFIG:
  DATASET:
    SPLIT: minival

SIMULATOR_GPU_ID: 0
TORCH_GPU_ID: 0
VIDEO_OPTION: []
TENSORBOARD_DIR: ""
VIDEO_DIR: ""
TEST_EPISODE_COUNT: 2
EVAL_CKPT_PATH_DIR: data/test_checkpoints/ddppo/instance_imagenav/ckpt.0.pth
NUM_ENVIRONMENTS: 1
CHECKPOINT_FOLDER: data/test_checkpoints/ddppo/instance_imagenav
TRAINER_NAME: ddppo
SENSORS: [DEPTH_SENSOR, RGB_SENSOR]
NUM_UPDATES: 2
LOG_INTERVAL: 10
NUM_CHECKPOINTS: 2
# Force PyTorch to be single threaded as
# this improves performance considerably
FORCE_TORCH_SINGLE_THREADED: True

RL:
  SUCCESS_REWARD: 2.5
  SLACK_REWARD: -1e-3

  POLICY:
    name: PointNavResNetPolicy
    OBS_TRANSFORMS:
      ENABLED_TRANSFORMS: [ResizeShortestEdge, CenterCropper]
      RESIZE_SHORTEST_EDGE:
        TRANS_KEYS: [rgb, depth, semantic, instance_imagegoal]

  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 2
    num_mini_batch: 1
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 2.5e-4
    eps: 1e-5
    max_grad_norm: 0.2
    num_steps: 16
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50

    use_normalized_advantage: False

    hidden_size: 512

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: GLOO
    # Visual encoder backbone
    pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
    # Initialize with pretrained weights
    pretrained: False
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: True
    # Whether or not to reset the critic linear layer
    reset_critic: True

    # Model parameters
    backbone: resnet18
    rnn_type: LSTM
    num_recurrent_layers: 2

    force_distributed: True
